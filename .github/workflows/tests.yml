name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run linting with ruff
      run: |
        poetry run ruff check .
        poetry run ruff format --check .
    
    - name: Run type checking with mypy
      run: poetry run mypy graphql_codegen/

    - name: Generate sample outputs
      run: |
        poetry run graphql-codegen test/inputs/smoothies/
        poetry run graphql-codegen test/inputs/userpost/

    # NEW: make the generated packages importable by adding to PYTHONPATH
    - name: Add generated packages to Python path
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/test/outputs" >> $GITHUB_ENV
    
    - name: Run tests with pytest
      run: poetry run pytest test/ -v --cov=graphql_codegen --cov-report=xml
