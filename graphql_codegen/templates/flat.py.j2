{% from "macros.j2" import render_enums, render_types, render_unions, render_model_rebuilds %}
from __future__ import annotations
from typing import List, Optional, Any, Dict, Union, Iterable
from pydantic import BaseModel, Field
from enum import Enum
{%- if additional_imports %}
{%- for import_line in additional_imports %}
{{ import_line }}
{%- endfor %}
{%- endif %}

# Auto-generated helpers - inline for flat output
{% include "runtime_helpers.j2" %}

{% if needs_computable_import or needs_expandable_import %}
# Import mixins from auto module equivalent
{% if needs_computable_import %}
{% include "mixins.j2" %}
{% endif %}

{% if needs_expandable_import %}
class Expandable:
    """Mixin for types with @expand directive."""
    def expand(self) -> Any:
        """Expand this node into primitive components."""
        # Simplified expand implementation for flat output
        return self
{% endif %}
{% endif %}

{{ render_enums(enums) }}

{{ render_types(types) }}

{{ render_unions(types) }}

{{ render_model_rebuilds(types) }} 